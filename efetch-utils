#!/usr/bin/perl -w

use strict;
use warnings;
use Switch;
use File::Basename;
use Cwd 'abs_path';

my $usage = <<_EOUSAGE_;

Usage: efetch-utils <command> <arguments>
version: 0.0.1
supports:

    card      <list>     #download card head | nuc genbank format
    region    <list>     #download a region  | nuc genbank format
    efetch    <list>     #download list acc  | nuc genbank format
    gff3      <list>     #download list acc  | nuc gff3 format
    fasta     <list>     #download list acc  | nuc fasta format

    protein   <gb>
    taxonomy  <gb>

Licenced:
(c) 2020-2020 - LEI ZHANG
Logic Informatics Co.,Ltd.
zhanglei\@logicinformatics.com

_EOUSAGE_
;

if( ( scalar @ARGV) < 1){
    printf STDERR $usage;
    exit;

}

my $cmd  = shift @ARGV;

switch($cmd){

    case 'card'        { card_run(); };
    case 'region'      { region_run(); };
    case 'protein'     { protein_run(); };
    case 'taxonomy'    { taxonomy_run(); };
    case 'efetch'      { efetch_run(); };
    case 'gff3'        { gff3_run(); };
    case 'fasta'       { fasta_run(); };

}

exit;

sub card_run{

    if(@ARGV < 1){
        printf STDERR qq{\n[ERR] arguments number error!\n$usage};
        exit;
    }
    my $nlist = shift @ARGV;
    card( $nlist );

}

sub card {
    
    my $nlist = shift;
    my $fh;
    ($nlist eq '-') ? ( $fh = "STDIN" ) :
                      (open( $fh, $nlist ) || die "$!\n");

    while (<$fh>) {
    
        chomp;
        my @its   = split /\|/, $_;
        my @t     = split /-/,  $its[3];
        my $kcurl = qq{http://www.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi\?db=nucleotide&retmode=text\&rettype=gb\&seq_start=$t[0]\&seq_stop=$t[1]&strand=$its[2]&id=$its[1]&api_key=4e7eff882368d12353b87c3896fb290f7308};    
        print qq{curl -L "$kcurl" -o $its[1]_$t[0]_$t[1].gb;\n};
    
    }
    close $fh;

}

sub region_run{

    if(@ARGV < 1){
        printf STDERR qq{\n[ERR] arguments number error!\n$usage};
        exit;
    }
    my $nlist = shift @ARGV;
    region( $nlist );

}

sub region {
    
    my $nlist = shift;
    my $fh;
    ($nlist eq '-') ? ( $fh = "STDIN" ) :
                      (open( $fh, $nlist ) || die "$!\n");

    while (<$fh>) {
    
        chomp;
        my @t   = split /:/, $_;
        my $kcurl = qq{http://www.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi\?db=nucleotide&retmode=text\&rettype=gb\&seq_start=$t[1]\&seq_stop=$t[2]&strand=1&id=$t[0]&api_key=4e7eff882368d12353b87c3896fb290f7308};    
        print qq{curl -L "$kcurl" -o $t[0]_$t[1]_$t[2].gb;\n};
    
    }
    close $fh;

}

sub gff3_run{

    if(@ARGV < 1){
        printf STDERR qq{\n[ERR] arguments number error!\n$usage};
        exit;
    }
    my $nlist = shift @ARGV;
    gff3( $nlist );

}

sub gff3 {
    
    my $nlist = shift;
    my $fh;
    ($nlist eq '-') ? ( $fh = "STDIN" ) :
                      (open( $fh, $nlist ) || die "$!\n");

    while (<$fh>) {
    
        chomp;
        my $kcurl = qq{https://www.ncbi.nlm.nih.gov/sviewer/viewer.cgi?db=nuccore\&report=gff3\&id=$_\&api_key=4e7eff882368d12353b87c3896fb290f7308};    
        print qq{curl -L "$kcurl" -o $_.gff3;\n};
    
    }
    close $fh;

}

sub fasta_run{

    if(@ARGV < 1){
        printf STDERR qq{\n[ERR] arguments number error!\n$usage};
        exit;
    }
    my $nlist = shift @ARGV;
    fasta( $nlist );

}

sub fasta {
    
    my $nlist = shift;
    my $fh;
    ($nlist eq '-') ? ( $fh = "STDIN" ) :
                      (open( $fh, $nlist ) || die "$!\n");

    while (<$fh>) {
    
        chomp;
        my $kcurl = qq{http://www.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi\?db=nucleotide&retmode=text\&rettype=fasta\&id=$_&api_key=4e7eff882368d12353b87c3896fb290f7308};    
        print qq{curl -L "$kcurl" -o $_.fasta;\n};
    
    }
    close $fh;

}

sub efetch_run{

    if(@ARGV < 1){
        printf STDERR qq{\n[ERR] arguments number error!\n$usage};
        exit;
    }
    my $nlist = shift @ARGV;
    efetch( $nlist );

}


sub efetch {
    
    my $nlist = shift;
    my $fh;
    ($nlist eq '-') ? ( $fh = "STDIN" ) :
                      (open( $fh, $nlist ) || die "$!\n");

    while (<$fh>) {
    
        chomp;
        my $kcurl = qq{http://www.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi\?db=nucleotide&retmode=text\&rettype=gb\&id=$_&api_key=4e7eff882368d12353b87c3896fb290f7308};    
        print qq{curl -L "$kcurl" -o $_.gb;\n};
    
    }
    close $fh;

}

sub protein_run {

    if(@ARGV != 1){
        printf STDERR qq{\n[ERR] arguments number error!\n$usage};
        exit;
    }

    my ($gb ) = @ARGV;
    proteins( $gb );

}

sub proteins {
    
    my ($gb)  = @_;

    my $fh;
    ($gb eq '-') ? ( $fh = "STDIN" ) :
                   (open( $fh, $gb ) || die "$!\n");

    local $/="\n\/\/";
    while (<$fh>){
       
       my ($locus) = $_=~/ACCESSION\s+(\S+)/;
       foreach my $f ( split /\n     CDS/, $_ ) {
           
           next if($f !~ /translation=/);
           my ($protein_id, $translation ) = ("-", "-");
           
           $protein_id  =  $1 if($f =~ /\/protein_id="(.+?)"/);
           $translation =  $1 if($f =~ /\/translation="(.+?)"/ms);
           $translation =~s/\s+//g;

           print qq{>$protein_id $locus\n$translation\n};

       }


    }
    close $fh;
    local $/="\n"

}

sub taxonomy_run{

    if(@ARGV != 1){
        printf STDERR qq{\n[ERR] arguments number error!\n$usage};
        exit;
    }

    my ($gb ) = @ARGV;
    taxonomy( $gb );

}

sub taxonomy {

    my ($gb)  = @_;

    my $fh;
    ($gb eq '-') ? ( $fh = "STDIN" ) :
                   (open( $fh, $gb ) || die "$!\n");

    local $/="\n\/\/";
    while (<$fh>){

        next if(!/VERSION/);
        my ($acc) = $_=~/ACCESSION\s+(\S+)/;
        my ($taxon) = $_=~/taxon:(\d+)/;
        print qq{$acc\t$taxon\n};
        my @protein_ids = $_ =~ /protein_id="(\S+)"/g;

        foreach my $prt (@protein_ids) {
            print qq{$prt\t$taxon\n};
        }


    }
    close $fh;
    local $/="\n"

}
