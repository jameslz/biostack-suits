#!/usr/bin/perl -w

use strict;
use warnings;
use Switch;

my $usage = <<_EOUSAGE_;

Usage: sra-utils <command> <arguments>
version: 0.0.1
supports:

    fastq-dump <sra>  <path>
    mapping_file <SraRunInfo> <mini-size:|20000>
    extract    <srp> <mapping_file>

Licenced:
(c) 2018-2020 - LEI ZHANG
Logic Informatics Co.,Ltd.
zhanglei\@logicinformatics.com


_EOUSAGE_
;

if( ( scalar @ARGV) < 1){
    printf STDERR $usage;
    exit;

}

my $cmd           = shift @ARGV; 

switch($cmd){

    case 'fastq-dump'   { fastq_run(); };
    case 'mapping_file' { mapping_file(); };
    case 'extract'      { extract(); };

}

exit;

sub fastq_run{

    if(@ARGV != 2){
        printf STDERR qq{\n[ERR] arguments number error!\n$usage};
        exit;
    }

    fastq_dump();

}

sub fastq_dump {
    
    my ($sra, $path) = @ARGV;

    my $cmd  = qq{mkdir -p $path && fastq-dump --split-3 --defline-seq  '\@\$sn' --defline-qual "+"  -O $path  $sra ;\n};
    print  $cmd;
    system $cmd;

}

sub mapping_file {
   
    
    if(@ARGV != 2){
        printf STDERR qq{\n[ERR] arguments number error!\n$usage};
        exit;
    }

    my ($sra, $minisize)  = @ARGV;
   
    my $fh;
    ($sra eq '-') ? ( $fh = "STDIN" ) :
                   (open( $fh, $sra ) || die "$!\n");

    print qq{#run\texperiment\tstudy\tproject\tbiosample\tsample name\n};
    <$fh>;
    while (<$fh>){
        next if(!/^[A-Z]/);
        my @its = split /\t/, $_;
        next if( $its[3] < $minisize );
        print qq{$its[0]\t$its[10]\t$its[20]\t$its[21]\t$its[25]\t$its[29]\n};
    }
    close $fh;

}


sub extract{
    
    if(@ARGV != 2){
        printf STDERR qq{\n[ERR] arguments number error!\n$usage};
        exit;
    }

    my ($srp, $mapping_file)  = @ARGV;
    my ($type) = $srp =~ /^(.R)/;
    my $cmd    = qq{grep $type $mapping_file \| perl -ane \'print qq\{sra-utils fastq-dump $srp\/\$F[0].sra raw_data\\n\}\' \| bash\n};
    system $cmd;


}